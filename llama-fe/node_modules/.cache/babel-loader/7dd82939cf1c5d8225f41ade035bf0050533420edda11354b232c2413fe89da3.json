{"ast":null,"code":"import axios from \"axios\";\nexport const getReplyFromQn = async qn => {\n  const res = await axios.get(\"http://127.0.0.1:5000/api\", {\n    params: {\n      prompt: qn\n    }\n  });\n  console.log(res.data);\n  return res.data;\n};\nexport const saveMessages = messages => {\n  localStorage.setItem(\"messages\", JSON.stringify(messages));\n};\nexport const getRecipe = recipeText => {\n  const sections = recipeText.split(\"\\n\\n\");\n\n  // Extract and parse the ingredients section\n  const ingredientsSection = sections.find(section => section.startsWith(\"| Ingredient | Quantity |\"));\n  if (ingredientsSection) {\n    const ingredientsData = ingredientsSection.split(\"\\n\").slice(2) // Skip the header row and separator\n    .map(row => {\n      const [ingredient, quantity] = row.split(\"|\").map(cell => cell.trim());\n      return {\n        ingredient,\n        quantity\n      };\n    });\n    return ingredientsData;\n  }\n};","map":{"version":3,"names":["axios","getReplyFromQn","qn","res","get","params","prompt","console","log","data","saveMessages","messages","localStorage","setItem","JSON","stringify","getRecipe","recipeText","sections","split","ingredientsSection","find","section","startsWith","ingredientsData","slice","map","row","ingredient","quantity","cell","trim"],"sources":["/Users/andres/Desktop/CS3263/project/llama-lunch/llama-fe/src/utils.ts"],"sourcesContent":["import axios from \"axios\";\n\nexport const getReplyFromQn = async (qn: string) => {\n  const res = await axios.get(\"http://127.0.0.1:5000/api\", {\n    params: {\n      prompt: qn,\n    },\n  });\n  console.log(res.data);\n  return res.data;\n};\n\nexport const saveMessages = (messages: Message[]) => {\n  localStorage.setItem(\"messages\", JSON.stringify(messages));\n};\n\nexport interface Message {\n  message: string;\n  isUser: boolean;\n}\nexport interface Recipe {\n  opening: string;\n  title: string;\n  ingredients: string;\n  duration: string;\n  steps: string;\n  ending: string;\n}\n\nexport const getRecipe = (recipeText: string) => {\n  const sections = recipeText.split(\"\\n\\n\");\n\n  // Extract and parse the ingredients section\n  const ingredientsSection = sections.find((section) =>\n    section.startsWith(\"| Ingredient | Quantity |\")\n  );\n  if (ingredientsSection) {\n    const ingredientsData = ingredientsSection\n      .split(\"\\n\")\n      .slice(2) // Skip the header row and separator\n      .map((row) => {\n        const [ingredient, quantity] = row\n          .split(\"|\")\n          .map((cell) => cell.trim());\n        return { ingredient, quantity };\n      });\n    return ingredientsData;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,cAAc,GAAG,MAAOC,EAAU,IAAK;EAClD,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,2BAA2B,EAAE;IACvDC,MAAM,EAAE;MACNC,MAAM,EAAEJ;IACV;EACF,CAAC,CAAC;EACFK,OAAO,CAACC,GAAG,CAACL,GAAG,CAACM,IAAI,CAAC;EACrB,OAAON,GAAG,CAACM,IAAI;AACjB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,QAAmB,IAAK;EACnDC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAeD,OAAO,MAAMK,SAAS,GAAIC,UAAkB,IAAK;EAC/C,MAAMC,QAAQ,GAAGD,UAAU,CAACE,KAAK,CAAC,MAAM,CAAC;;EAEzC;EACA,MAAMC,kBAAkB,GAAGF,QAAQ,CAACG,IAAI,CAAEC,OAAO,IAC/CA,OAAO,CAACC,UAAU,CAAC,2BAA2B,CAChD,CAAC;EACD,IAAIH,kBAAkB,EAAE;IACtB,MAAMI,eAAe,GAAGJ,kBAAkB,CACvCD,KAAK,CAAC,IAAI,CAAC,CACXM,KAAK,CAAC,CAAC,CAAC,CAAC;IAAA,CACTC,GAAG,CAAEC,GAAG,IAAK;MACZ,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGF,GAAG,CAC/BR,KAAK,CAAC,GAAG,CAAC,CACVO,GAAG,CAAEI,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MAC7B,OAAO;QAAEH,UAAU;QAAEC;MAAS,CAAC;IACjC,CAAC,CAAC;IACJ,OAAOL,eAAe;EACxB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}